# read background file if provided, otherwise use all annotated S. cerevisiae genes
if (!is.null(background_file)) {
background_genes <- read.table(background_file, header = F, stringsAsFactors = F)
background_genes <- background_genes[,1]
} else {
background_genes <- keys(org.Sc.sgd.db)
}
# map gene identifiers to common gene symbols
input_genes <- select(org.Sc.sgd, keys=input_genes, keytype="SGDID", columns="SYMBOL")
background_genes <- select(org.Sc.sgd, keys = background_genes, keytype = "SGDID", column = "SYMBOL")
# perform GO enrichment analysis for process, function and component
go_terms_bp <- goa::goa_bp(input_genes, background_genes, ont = "BP", pvalueCutoff = p_value_threshold)
go_terms_mf <- goa::goa_mf(input_genes, background_genes, ont = "MF", pvalueCutoff = p_value_threshold)
go_terms_cc <- goa::goa_cc(input_genes, background_genes, ont = "CC", pvalueCutoff = p_value_threshold)
# combine results and write to output file
go_terms <- rbind(go_terms_bp, go_terms_mf, go_terms_cc)
output_file <- paste0("COMPILED_DATA/GO_OUTPUT/", gsub(".txt", "_output.csv", basename(input_file)))
write.table(go_terms, file = output_file, sep = ",", row.names = F, col.names = T)
}
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input/", pattern = ".txt")
input_files
lapply(input_files, go_enrichment(p_value_threshold = 0.1))
for (file in input_files) {
go_enrichment(file, p_value_threshold = 0.1)
}
input_files
print(file)
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input/", pattern = ".txt", full.names = TRUE)
input_files
for (file in input_files) {
go_enrichment(file, p_value_threshold = 0.1)
}
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input/", pattern = ".txt", full.names = TRUE)
for (file in input_files) {
go_enrichment(file, p_value_threshold = 0.1)
}
library(AnnotationDbi)
library(org.Sc.sgd.db)
library(org.Sc.sgd)
library(GO.db)
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input/", pattern = ".txt", full.names = TRUE)
for (file in input_files) {
go_enrichment(file, p_value_threshold = 0.1)
}
library(AnnotationDbi)
data(org.Sc.sgd)
data(org.Sc.sgd.db)
BiocManager::install("org.Sc.sgd.db")
library(org.Sc.sgd.db)
for (file in input_files) {
go_enrichment(file, p_value_threshold = 0.1)
}
select(org.Sc.sgd.db, keys=input_genes, keytype="SGDID", columns="SYMBOL")
??select
help("select")
library(AnnotationDbi)
?select
install.packages("xfun",dependencies = TRUE,repos = "https://cran.r-project.org")
knitr::opts_chunk$set(echo = TRUE)
#ALTERNATIVE 3
library(AnnotationDbi)
library(org.Sc.sgd.db)
library(GO.db)
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input/", pattern = ".txt", full.names = TRUE)
for (file in input_files) {
go_enrichment(file, p_value_threshold = 0.1)
}
for (file in input_files) {
go_enrichment(file, p_value_threshold = 0.1)
}
select(org.Sc.sgd, keys = background_genes, keytype = "SGDID", column = "SYMBOL")
AnnotationDbi::select(org.Sc.sgd, keys = background_genes, keytype = "SGDID", column = "SYMBOL")
columns(org.Sc.sgd.db)
select(org.Sc.sgd.db, "RDN58-1", "ALIAS", "ORF")
select(org.Sc.sgd.db, keys = background_genes, keytype = "SGD", column = "ALIAS")
background_genes <- keys(org.Sc.sgd.db)
select(org.Sc.sgd.db, keys = background_genes, keytype = "SGD", column = "ALIAS")
?keys
head(background_genes)
head(background_genes, 100)
keys(org.Sc.sgd.db, keytype = SGD)
keys(org.Sc.sgd.db, keytype = "SGD")
background_genes <- keys(org.Sc.sgd.db, keytype = "SGD")
background_genes <- keys(org.Sc.sgd.db, keytype = "SGD")
select(org.Sc.sgd.db, keys=background_genes, keytype="SGD", columns="ALIAS")
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input/", pattern = ".txt", full.names = TRUE)
for (file in input_files) {
go_enrichment(file, p_value_threshold = 0.1)
}
go_enrichment <- function(input_file, background_file = NULL, p_value_threshold = 0.05) {
# read input file
input_genes <- read.table(input_file, header = F, stringsAsFactors = F)
input_genes <- input_genes[,1]
# read background file if provided, otherwise use all annotated S. cerevisiae genes
if (!is.null(background_file)) {
background_genes <- read.table(background_file, header = F, stringsAsFactors = F)
background_genes <- background_genes[,1]
} else {
background_genes <- keys(org.Sc.sgd.db, keytype = "SGD")
}
# map gene identifiers to common gene symbols
input_genes <- select(org.Sc.sgd.db, keys=input_genes, keytype="SGD", columns="ALIAS")
background_genes <- select(org.Sc.sgd.db, keys = background_genes, keytype = "SGD", column = "ALIAS")
# perform GO enrichment analysis for process, function and component
go_terms_bp <- goa::goa_bp(input_genes, background_genes, ont = "BP", pvalueCutoff = p_value_threshold)
go_terms_mf <- goa::goa_mf(input_genes, background_genes, ont = "MF", pvalueCutoff = p_value_threshold)
go_terms_cc <- goa::goa_cc(input_genes, background_genes, ont = "CC", pvalueCutoff = p_value_threshold)
# combine results and write to output file
go_terms <- rbind(go_terms_bp, go_terms_mf, go_terms_cc)
output_file <- paste0("COMPILED_DATA/GO_OUTPUT/", gsub(".txt", "_output.csv", basename(input_file)))
write.table(go_terms, file = output_file, sep = ",", row.names = F, col.names = T)
}
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input/", pattern = ".txt", full.names = TRUE)
for (file in input_files) {
go_enrichment(file, p_value_threshold = 0.1)
}
head(input_genes)
input_genes <- select(org.Sc.sgd.db, keys=input_genes, keytype="SGD", columns="ALIAS")
input_genes <- read.table(input_files[1], header = F, stringsAsFactors = F)
head(input_genes)
input_genes <- input_genes[,1]
head(input_genes)
input_genes <- select(org.Sc.sgd.db, keys=input_genes, keytype="SGD", columns="ALIAS")
head(input_genes)
dim(input_genes)
columns(org.Sc.sgd.db)
input_genes <- select(org.Sc.sgd.db, keys=input_genes, keytype="SGD", columns="GENENAME")
input_genes <- read.table(input_files[1], header = F, stringsAsFactors = F)
input_genes <- input_genes[,1]
input_genes <- select(org.Sc.sgd.db, keys=input_genes, keytype="SGD", columns="GENENAME")
head(input_genes)
library(topGO)
runTest(input_genes, algorithm = "classic", statistic = "score")
input_genes <- read.table(input_files[1], header = F, stringsAsFactors = F)
input_genes <- input_genes[,1]
input_genes <- select(org.Sc.sgd.db, keys=input_genes, keytype="SGD", columns=c("GENENAME", "GO"))
head(input_genes)
input_genes <- read.table(input_files[1], header = F, stringsAsFactors = F)
input_genes <- input_genes[,1]
input_genes <- select(GO.db, keys=input_genes, keytype="SGD", columns=c("GENENAME", "GO"))
columns(GO.db)
input_genes <- select(org.Sc.sgd.db, keys=input_genes, keytype="SGD", columns=c("GENENAME", "GO"))
library(topGO)
sampleGOdata <- new("topGOdata",
description = "test",
ontology = "BP",
allGenes = input_genes,
geneSel=input_genes$GO,
nodeSize = 10,
annot = org.Sc.sgd.db)
sampleGOdata <- new("topGOdata",
description = "test",
ontology = "BP",
allGenes = as.character(input_genes$GENENAME),
geneSel=input_genes$GO,
nodeSize = 10,
annot = org.Sc.sgd.db)
as.character(input_genes$GENENAME)
input_genes <- read.table(input_files[1], header = F, stringsAsFactors = F)
input_genes <- input_genes[,1]
input_genes <- select(org.Sc.sgd.db, keys=input_genes, keytype="SGD", columns=c("SGD", "GENENAME", "GO"))
head(input_genes)
sampleGOdata <- new("topGOdata",
description = "test",
ontology = "BP",
allGenes = as.character(input_genes$SGD),
geneSel=input_genes$GO,
nodeSize = 10,
annot = org.Sc.sgd.db)
input_genes$SGD
names(input_genes) <- input_genes$SGD
names(input_genes$SGD) <- input_genes$SGD
is.vector(input_genes)
is.vector(input_genes$SGD)
is.named(input_genes$SGD)
is.name(input_genes$SGD)
input_genes <- read.table(input_files[1], header = F, stringsAsFactors = F)
input_genes <- input_genes[,1]
input_genes <- select(org.Sc.sgd.db, keys=input_genes, keytype="SGD", columns=c("SGD", "GENENAME", "GO"))
allGenes_vector<-input_genes$GENENAME
names(allGenes_vector) <- input_genes$SGD
sampleGOdata <- new("topGOdata",
description = "test",
ontology = "BP",
allGenes = allGenes_vector,
geneSel=input_genes$GO,
nodeSize = 10,
annot = org.Sc.sgd.db)
str(input_genes)
sampleGOdata <- new("topGOdata",
description = "test",
ontology = "BP",
allGenes = as.factor(input_genes$GENENAME),
geneSel=input_genes$GO,
nodeSize = 10,
annot = org.Sc.sgd.db)
sampleGOdata <- new("topGOdata",
description = "test",
ontology = "BP",
allGenes = as.factor(allGenes_vector),
geneSel=input_genes$GO,
nodeSize = 10,
annot = org.Sc.sgd.db)
allGenes <- factor(rep("not selected", length(allGenes)))
head(allGenes)
allGenes[input_genes] <- "selected"
allGenes[input_genes$GENENAME] <- "selected"
allGenes <- factor(rep("not selected", length(allGenes)))
class(input_genes)
allGenes_vector<-as.vector(input_genes$GENENAME)
allGenes_vector<-as.vector(input_genes$SGD)
allGenes <- factor(rep("not selected", length(20)))
dim(allGenes)
allGenes <- factor(rep("not selected", 20))
dim(allGenes)
allGenes <- factor(rep("not selected", length(allGenes)))
dim(allGenes)
BiocManager::install("goa")
library("goa")
library(goa)
BiocManager::install("ViSEAGO")
head(background_genes)
background_genes <-scan("COMPILED_DATA/GO_GENE_LISTS/Background_all.txt",
quiet=TRUE,
what="")
head(background_genes)
class(background_genes)
background_genes <- keys(org.Sc.sgd.db, keytype = "SGD")
head(background_genes)
class(background_genes)
selection<-scan(input_file[1],
quiet=TRUE,
what="")
selection<-scan(input_files[1],
quiet=TRUE,
what="")
head(selection)
ViSEAGO::available_organisms(Bioconductor)
library(viSEAGO)
installed.packages()
installed.packages(ViSEAGO)
library(ViSEAGO)
update.packages("htmltools")
library(ViSEAGO)
BiocManager::install("ViSEAGO")
library(DESeq2)
library(ViSEAGO)
remove.packages(rlang)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(DESeq2)
install.packages(c("BH", "bit", "cli", "dbplyr", "digest", "DT", "evaluate", "formatR", "htmltools", "matrixStats", "pak", "png", "Rcpp", "RcppArmadillo", "RCurl", "rmarkdown", "RSQLite", "vctrs", "XML"))
install.packages(c("BH", "bit", "cli", "dbplyr", "digest", "DT", "evaluate", "formatR", "htmltools", "matrixStats", "pak", "png", "Rcpp", "RcppArmadillo", "RCurl", "rmarkdown", "RSQLite", "vctrs", "XML"))
install.packages(c("BH", "bit", "cli", "dbplyr", "digest", "DT", "evaluate", "formatR", "htmltools", "matrixStats", "pak", "png", "Rcpp", "RcppArmadillo", "RCurl", "rmarkdown", "RSQLite", "vctrs", "XML"))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
BiocManager::install("DESeq2")
library(DESeq2)
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
library(DESeq2)
?vctrs
BiocManager::install("vctrs")
library(ggplot2)
library(DESeq2)
install.packages(c("bit", "cli", "matrixStats", "png", "Rcpp", "RCurl", "RSQLite", "vctrs", "XML"))
library(DESeq2)
remove.packages("DESeq2")
library(ggplot2)
install.packages("vctrs")
install.packages("vctrs")
library(vctrs)
remove.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
.libPaths()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(DESeq2)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input/", pattern = ".txt", full.names = TRUE)
input_files
input_genes <- select(org.Sc.sgd.db, keys=input_genes, keytype="SGD", columns="GENENAME")
library(AnnotationDbi)
library(org.Sc.sgd.db)
BiocManager::install("org.Sc.sgd.db")
library(org.Sc.sgd.db)
selection<-scan(input_file,
quiet=TRUE,
what="")
selection<-scan(input_files[1],
quiet=TRUE,
what="")
head(selection)
selection
input_genes <- read.table(input_files[1], header = F, stringsAsFactors = F)
input_genes <- input_genes[,1]
input_genes
input_genes <- select(org.Sc.sgd.db, keys=input_genes, keytype="SGD", columns="GENENAME")
input_genes
background_genes <- select(org.Sc.sgd.db, keys = background_genes, keytype = "SGD", column = "GENENAME")
length(background_genes)
dim(background_genes)
head(background_genes, 100)
tail(background_genes, 100)
?new
BiocManager::install("ViSEAGO")
library(ViSEAGO)
library(vctrs)
install.packages("vctrs")
install.packages("vctrs")
library(vctrs)
remove.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
library(ViSEAGO)
Uniprot<-ViSEAGO::Uniprot2GO()
ViSEAGO::available_organisms(Uniprot)
Bioconductor<-ViSEAGO::Bioconductor2GO()
ViSEAGO::available_organisms(Bioconductor)
ViSEAGO::available_organisms(Uniprot)
ViSEAGO::available_organisms(Bioconductor)
help(ViSEAGO)
Ensembl<-ViSEAGO::Ensembl2GO()
ViSEAGO::available_organisms(Ensembl)
EntrezGene<-ViSEAGO::EntrezGene2GO()
ViSEAGO::available_organisms(EntrezGene)
BiocManager::install("clusterProfiler")
library(clusterProfiler)
knitr::opts_chunk$set(echo = TRUE)
input_genes <- read.table(input_files[1], header = F, stringsAsFactors = F)
input_genes <- as.character(input_genes[,1])
input_genes
head(org.Sc.sgd.db)
columns(org.Sc.sgd.db)
colnames(org.Sc.sgd.db)
library(AnnotationDbi)
colnames(org.Sc.sgd.db)
keytypes(org.Sc.sgd.db)
library(org.Sc.sgd.db)
colnames(org.Sc.sgd.db)
keytypes(org.Sc.sgd.db)
columns(org.Sc.sgd.db)
input_files
Go_output <- enrichGO(gene = input_genes, OrgDb = org.Sc.sgd.db, keyType = "SGD", ont = "BP", pvalueCutoff = 0.1, universe = "COMPILED_DATA/GO_GENE_LISTS/Background_all.txt")
input_genes <- read.table(input_files[2], header = F, stringsAsFactors = F)
input_genes <- as.character(input_genes[,1])
Go_output <- enrichGO(gene = input_genes, OrgDb = org.Sc.sgd.db, keyType = "SGD", ont = "BP", pvalueCutoff = 0.1, universe = "COMPILED_DATA/GO_GENE_LISTS/Background_all.txt")
background_genes_all <- read.table(file = "COMPILED_DATA/GO_GENE_LISTS/Background_all.txt", header = F, stringsAsFactors = F)
background_genes_all <- background_genes_all[,1]
input_genes <- read.table(input_files[1], header = F, stringsAsFactors = F)
input_genes <- input_genes[,1]
Go_output <- enrichGO(gene = input_genes, OrgDb = org.Sc.sgd.db, keyType = "SGD", ont = "BP", pvalueCutoff = 0.1, universe = background_genes_all)
as.data.frame(Go_output)
output_file <- paste0("COMPILED_DATA/GO_OUTPUT/", gsub(".txt", "_output.txt", basename(input_files[1])))
output_file
write.table(Go_output, file = output_file, sep = ",", row.names = F, col.names = T)
write.table(Go_output, file = output_file, sep = ",", row.names = F, col.names = T, append = TRUE)
write.table(Go_output, file = output_file, sep = ",", row.names = F, col.names = T, append = TRUE)
output_file <- paste0("COMPILED_DATA/GO_OUTPUT/", gsub(".txt", "_output.csv", basename(input_files[1])))
write.table(Go_output, file = output_file, sep = ",", row.names = F, col.names = T, append = TRUE)
columns(org.Sc.sgd.db)
input_genes_genename <- bitr(input_genes, fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
head(input_genes_genename, 100)
tail(input_genes_genename, 100)
input_genes_genename
tail(input_genes_genename, 500)
background_genename_all <- bitr(background_genes_all, fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
dim(input_genes_genename)
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input/", pattern = ".txt", full.names = TRUE)
input_genes <- read.table(input_files[1], header = F, stringsAsFactors = F)
input_genes <- input_genes[,1]
input_genename <- bitr(input_genes, fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
background_genes_all <- read.table(file = "COMPILED_DATA/GO_GENE_LISTS/Background_all.txt", header = F, stringsAsFactors = F)
background_genes_all <- background_genes_all[,1]
background_genename_all <- bitr(background_genes_all, fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
Go_output <- enrichGO(gene = input_genes_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "SGD", ont = "BP", pvalueCutoff = 0.1, universe = background_genename_all[,2])
output_file <- paste0("COMPILED_DATA/GO_OUTPUT/", gsub(".txt", "_output.csv", basename(input_files[1])))
write.table(Go_output, file = output_file, sep = ",", row.names = F, col.names = T, append = TRUE)
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input/", pattern = ".txt", full.names = TRUE)
input_genes <- read.table(input_files[1], header = F, stringsAsFactors = F)
input_genes <- input_genes[,1]
input_genename <- bitr(input_genes, fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
background_genes_all <- read.table(file = "COMPILED_DATA/GO_GENE_LISTS/Background_all.txt", header = F, stringsAsFactors = F)
background_genes_all <- background_genes_all[,1]
background_genename_all <- bitr(background_genes_all, fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
Go_output <- enrichGO(gene = input_genes_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "SGD", ont = "BP", pvalueCutoff = 0.1, universe = background_genename_all[,2])
output_file <- paste0("COMPILED_DATA/GO_OUTPUT/", gsub(".txt", "_output.csv", basename(input_files[1])))
write.table(Go_output, file = output_file, sep = ",", row.names = F, col.names = T, append = TRUE)
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input/", pattern = ".txt", full.names = TRUE)
input_genes <- read.table(input_files[1], header = F, stringsAsFactors = F)
input_genes <- input_genes[,1]
input_genename <- bitr(input_genes, fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
background_genes_all <- read.table(file = "COMPILED_DATA/GO_GENE_LISTS/Background_all.txt", header = F, stringsAsFactors = F)
background_genes_all <- background_genes_all[,1]
background_genename_all <- bitr(background_genes_all, fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
Go_output <- enrichGO(gene = input_genes_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "GENENAME", ont = "BP", pvalueCutoff = 0.1, universe = background_genename_all[,2])
output_file <- paste0("COMPILED_DATA/GO_OUTPUT/", gsub(".txt", "_output.csv", basename(input_files[1])))
write.table(Go_output, file = output_file, sep = ",", row.names = F, col.names = T, append = TRUE)
for (file in input_files) {
print(file)
}
library(org.Sc.sgd.db)
library(clusterProfiler)
library(AnnotationDbi)
go_enrichment <- function(input_file, background_file, p_value_threshold = 0.05){
input_genes <- read.table(file = input_file,
header = F,
stringsAsFactors = F)
input_genename <- bitr(input_genes[,1], fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
background_genes_all <- read.table(file = background_file,
header = F,
stringsAsFactors = F)
background_genename_all <- bitr(background_genes_all[,1], fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
Go_output_BP <- enrichGO(gene = input_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "GENENAME", ont = "BP", pvalueCutoff = 0.1, universe = background_genename_all[,2])
Go_output_MP <- enrichGO(gene = input_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "GENENAME", ont = "MP", pvalueCutoff = 0.1, universe = background_genename_all[,2])
Go_output_CC <- enrichGO(gene = input_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "GENENAME", ont = "CC", pvalueCutoff = 0.1, universe = background_genename_all[,2])
go_terms <- rbind(as.data.frame(Go_output_BP), as.data.frame(Go_output_MP), as.data.frame(Go_output_CC))
output_file <- paste0("COMPILED_DATA/GO_OUTPUT/", gsub(".txt", "_output.csv", basename(input_file)))
write.table(go_terms, file = output_file, sep = ",", row.names = F, col.names = T)
}
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input/", pattern = ".txt", full.names = TRUE)
for (file in input_files) {
go_enrichment(input_file = file, background_file = "COMPILED_DATA/GO_GENE_LISTS/Background_all.txt")
}
go_enrichment <- function(input_file, background_file, p_value_threshold = 0.05){
input_genes <- read.table(file = input_file,
header = F,
stringsAsFactors = F)
input_genename <- bitr(input_genes[,1], fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
background_genes_all <- read.table(file = background_file,
header = F,
stringsAsFactors = F)
background_genename_all <- bitr(background_genes_all[,1], fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
Go_output_BP <- enrichGO(gene = input_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "GENENAME", ont = "BP", pvalueCutoff = 0.1, universe = background_genename_all[,2])
Go_output_MF <- enrichGO(gene = input_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "GENENAME", ont = "MF", pvalueCutoff = 0.1, universe = background_genename_all[,2])
Go_output_CC <- enrichGO(gene = input_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "GENENAME", ont = "CC", pvalueCutoff = 0.1, universe = background_genename_all[,2])
go_terms <- rbind(as.data.frame(Go_output_BP), as.data.frame(Go_output_MF), as.data.frame(Go_output_CC))
output_file <- paste0("COMPILED_DATA/GO_OUTPUT/", gsub(".txt", "_output.csv", basename(input_file)))
write.table(go_terms, file = output_file, sep = ",", row.names = F, col.names = T)
}
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input/", pattern = ".txt", full.names = TRUE)
for (file in input_files) {
go_enrichment(input_file = file, background_file = "COMPILED_DATA/GO_GENE_LISTS/Background_all.txt")
}
length(as.data.frame(Go_output_BP))
nrow(as.data.frame(Go_output_BP))
rep(x = "BP", 10)
Go_output_BP <- enrichGO(gene = input_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "GENENAME", ont = "BP", pvalueCutoff = 0.1, universe = background_genename_all[,2])
nrow(as.data.frame(Go_output_BP))
df = data.frame(matrix(nrow = 1, ncol = 9))
library(org.Sc.sgd.db)
library(clusterProfiler)
library(AnnotationDbi)
go_enrichment <- function(input_file, background_file, p_value_threshold = 0.05){
input_genes <- read.table(file = input_file,
header = F,
stringsAsFactors = F)
input_genename <- bitr(input_genes[,1], fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
background_genes_all <- read.table(file = background_file,
header = F,
stringsAsFactors = F)
background_genename_all <- bitr(background_genes_all[,1], fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
Go_output_BP <- enrichGO(gene = input_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "GENENAME", ont = "BP", pvalueCutoff = p_value_threshold, universe = background_genename_all[,2])
Go_output_MF <- enrichGO(gene = input_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "GENENAME", ont = "MF", pvalueCutoff = p_value_threshold, universe = background_genename_all[,2])
Go_output_CC <- enrichGO(gene = input_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "GENENAME", ont = "CC", pvalueCutoff = p_value_threshold, universe = background_genename_all[,2])
df = data.frame(matrix(nrow = 1, ncol = 9))
go_terms <- rbind(as.data.frame(Go_output_BP), df, as.data.frame(Go_output_MF), df, as.data.frame(Go_output_CC))
output_file <- paste0("COMPILED_DATA/GO_OUTPUT/", gsub(".txt", "_output.csv", basename(input_file)))
write.table(go_terms, file = output_file, sep = ",", row.names = F, col.names = T)
}
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input/", pattern = ".txt", full.names = TRUE)
for (file in input_files) {
go_enrichment(input_file = file, background_file = "COMPILED_DATA/GO_GENE_LISTS/Background_all.txt", p_value_threshold = 0.1)
}
df = data.frame(matrix(nrow = 1, ncol = 9))
colnames(df) <- c("ID", "Description", "GeneRatio",	"BgRatio",	"pvalue",	"p.adjust",	"qvalue",	"geneID",	"Count")
go_enrichment <- function(input_file, background_file, p_value_threshold = 0.05){
input_genes <- read.table(file = input_file,
header = F,
stringsAsFactors = F)
input_genename <- bitr(input_genes[,1], fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
background_genes_all <- read.table(file = background_file,
header = F,
stringsAsFactors = F)
background_genename_all <- bitr(background_genes_all[,1], fromType="SGD", toType="GENENAME", OrgDb="org.Sc.sgd.db")
Go_output_BP <- enrichGO(gene = input_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "GENENAME", ont = "BP", pvalueCutoff = p_value_threshold, universe = background_genename_all[,2])
Go_output_MF <- enrichGO(gene = input_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "GENENAME", ont = "MF", pvalueCutoff = p_value_threshold, universe = background_genename_all[,2])
Go_output_CC <- enrichGO(gene = input_genename[,2], OrgDb = org.Sc.sgd.db, keyType = "GENENAME", ont = "CC", pvalueCutoff = p_value_threshold, universe = background_genename_all[,2])
df = data.frame(matrix(nrow = 1, ncol = 9))
colnames(df) <- c("ID", "Description", "GeneRatio",	"BgRatio",	"pvalue",	"p.adjust",	"qvalue",	"geneID",	"Count")
go_terms <- rbind(as.data.frame(Go_output_BP), df, as.data.frame(Go_output_MF), df, as.data.frame(Go_output_CC))
output_file <- paste0("COMPILED_DATA/GO_OUTPUT/", gsub(".txt", "_output.csv", basename(input_file)))
write.table(go_terms, file = output_file, sep = ",", row.names = F, col.names = T)
}
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input/", pattern = ".txt", full.names = TRUE)
for (file in input_files) {
go_enrichment(input_file = file, background_file = "COMPILED_DATA/GO_GENE_LISTS/Background_all.txt", p_value_threshold = 0.1)
}
input_files <- list.files(path = "COMPILED_DATA/GO_GENE_LISTS/GO_Input_wo_GRG/", pattern = ".txt", full.names = TRUE)
for (file in input_files) {
go_enrichment(input_file = file, background_file = "COMPILED_DATA/GO_GENE_LISTS/BACKGROUND_GENESET_SGD_DB_ID.txt", p_value_threshold = 0.1)
}
BiocManager::install("vsn")
BiocManager::install("apeglm")
BiocManager::install("EnhancedVolcano")
knitr::opts_chunk$set(echo = TRUE)
knitr::purl("MixTox_Transcriptomics_Downstream_Analysis.Rmd", documentation = 2)
