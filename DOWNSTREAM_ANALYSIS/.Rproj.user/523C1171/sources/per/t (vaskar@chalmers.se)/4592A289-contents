---
title: "MixTox_Transcriptomics_Downstream_Analysis"
author: "Vaskar Mukherjee"
date: "9/9/2021"
output: 
  html_document:
    toc: true
    toc_depth: 4
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# TRANSCRIPTOMIC ANALYSIS

In this project we used high‚Äêthroughput phenomics to identify synergistic or antagonistic interactions in chemical mixtures in the yeast Saccharomyces cerevisiae and Debaryomyces hansenii and used transcriptomic analysis to understand the mechanistic basis of the interactions.

Transcriptomics analysis to understand the mechanistic basis of chemical interactions was performed for two chemical interactions for growth rate (growth during the exponential growth phase), identified in our phenomics experiment, that were conserved in both species i.e. NaCl and rapamycin synergism, and salt and paraquat antagonism.

The details of the transcriptomic samples are given in **COMPILED_DATA/SAMPLE_DETAILS.xlsx**

* **UPSTREAM ANALYSIS**

We used the alignment program, HISAT2 (version 2.1.0) [Kim, 2015](https://doi.org/10.1038/nmeth.3317) for mapping next-generation sequencing reads with the reference sequence. Preprocessing of RNA-seq alignments for differential expression calling was performed afterwards using the Python package HTSeq (version 0.11.1) [Anders, 2014](https://doi.org/10.1093/bioinformatics/btu638). The UPSTREAM ANALYSIS RESULTS has been described in details in the [Git_folder](https://github.com/mukherjeevaskar267/Mixtox_transcriptomics/tree/main/UPSTREAM_ANALYSIS)

* **DOWNSTREAM ANALYSIS**

Downstream analysis to identify deferentially expressed genes was performed using the R package DESeq2 (version 1.30.1) [Love, 2014](https://doi.org/10.1186/s13059-014-0550-8).

## INSTALL PACKAGES

The following packages will be frequently used for the entire data analysis and visualization

+ ggplot2
+ DESeq2
+ pheatmap      
+ RColorBrewer

## IMPORT DATA

* STEP1 : Save the path of the HTSeq output folder in a variable

```{r}
#for cerevisiae
Dir_sc <- "RAW_COUNT_DATA/HTSEQ_SC/"

#for hansenii
Dir_dh <- "RAW_COUNT_DATA/HTSEQ_DH/"

```

* STEP2 : Create a sample table with 3 columns. First column should be "sampleName" i.e. the name identifier of the samples. The second column should be "fileName" i.e. the file name list in this htseq output folder with the correct extentions, and the third column should be condition i.e. the treatment condition. The column names should be exactly same without the quotations. This is necessary for the functions to work properly. You can create this table in excel and then copy paste it in a .txt object. Later it can be read by the read.table function.

```{r}
#for cerevisiae
sampleinfo_sc <- read.table("COMPILED_DATA/sampleTable_SC.txt", header = TRUE, sep = "\t", as.is = TRUE)

#for hansenii
sampleinfo_dh <- read.table("COMPILED_DATA/sampleTable_DH.txt", header = TRUE, sep = "\t", as.is = TRUE)
```

* STEP3 : Create the sampleTable object for both dataset

```{r}
#for cerevisiae
sampleTable_sc <- data.frame(sampleName = sampleinfo_sc$sampleName,
                          fileName = sampleinfo_sc$fileName,
                          condition = sampleinfo_sc$condition)

#for hansenii
sampleTable_dh <- data.frame(sampleName = sampleinfo_dh$sampleName,
                          fileName = sampleinfo_dh$fileName,
                          condition = sampleinfo_dh$condition)
```

* STEP4 : Build the DESeqDataSet

```{r, message=FALSE, warning=FALSE}
library(DESeq2)
#for cerevisiae
ddsHTSeq_sc <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable_sc,
                                       directory = Dir_sc,
                                       design= ~ condition)

#for hansenii
ddsHTSeq_dh <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable_dh,
                                       directory = Dir_dh,
                                       design= ~ condition)
```

* STEP5 : Print the object

```{r}
#for cerevisiae
ddsHTSeq_sc
#for hansenii
ddsHTSeq_dh
```


## PRE-FILTERING

```{r}
#for cerevisiae
keep<-rowSums(counts(ddsHTSeq_sc)) >= 10
dds_SC<-ddsHTSeq_sc[keep, ]
dds_SC_LOST<-ddsHTSeq_sc[!keep, ]
#for hansenii
keep<-rowSums(counts(ddsHTSeq_dh)) >= 10
dds_DH<-ddsHTSeq_dh[keep, ]
dds_DH_LOST<-ddsHTSeq_dh[!keep, ]
```

## DATA-TRANSFORMATION 

Data-transformation functions within DESeq2 are provided for applications other than differential testing, for example clustering of samples or other machine learning applications. Those are the ntd (shifted logarithm), rlog (regularized logarithm) and vst (variance stabilizing transformation). The shifted logarithm has elevated standard deviation in the lower count range, and the regularized log to a lesser extent, while for the variance stabilized data the standard deviation is roughly constant along the whole dynamic range. Note that the vertical axis in such plots is the square root of the variance over all samples, so including the variance due to the experimental conditions. While a flat curve of the square root of variance over the mean may seem like the goal of such transformations, this may be unreasonable in the case of datasets with many true differences due to the experimental conditions.

```{r}
#for cerevisiae
rld_sc <- rlogTransformation(dds_SC)
vsd_sc <- varianceStabilizingTransformation(dds_SC)
ntd_sc <- normTransform(dds_SC)
#for hansenii
rld_dh <- rlogTransformation(dds_DH)
vsd_dh <- varianceStabilizingTransformation(dds_DH)
ntd_dh <- normTransform(dds_DH)
```

## DATA-VISUALIZATION 1: Effects of transformations on the variance

```{r figure1, echo=FALSE, fig.cap="Figure 1A: Effects of transformations on the variance, S. cerevisiae and rld transformation", fig.width=4, fig.height=4}
library(vsn)
meanSdPlot(assay(rld_sc))
```

```{r figure2, echo=FALSE, fig.cap="Figure 1B: Effects of transformations on the variance, S. cerevisiae and vsd transformation", fig.width=4, fig.height=4}
library(vsn)
meanSdPlot(assay(vsd_sc))
```

```{r figure3, echo=FALSE, fig.cap="Figure 1C: Effects of transformations on the variance, S. cerevisiae and ntd transformation", fig.width=4, fig.height=4}
library(vsn)
meanSdPlot(assay(ntd_sc))
```

```{r figure4, echo=FALSE, fig.cap="Figure 2A: Effects of transformations on the variance, D. hansenii and rld transformation", fig.width=4, fig.height=4}
library(vsn)
meanSdPlot(assay(rld_dh))
```

```{r figure5, echo=FALSE, fig.cap="Figure 2B: Effects of transformations on the variance, D. hansenii and vsd transformation", fig.width=4, fig.height=4}
library(vsn)
meanSdPlot(assay(vsd_dh))
```

```{r figure6, echo=FALSE, fig.cap="Figure 2C: Effects of transformations on the variance, D. hansenii and ntd transformation", fig.width=4, fig.height=4}
library(vsn)
meanSdPlot(assay(ntd_dh))
```

## DATA-VISUALIZATION 2: Plotting PCA 

The above analysis shows that the rld data transformation is most suitable for our dataset. Therefore from now on all analysis will be with the rld dataset

```{r figure7, echo=FALSE, fig.cap="Figure 3: PCA plot, rld and S. cerevisiae", fig.width=8, fig.height=4}
#for cerevisiae
plotPCA(rld_sc)
```

```{r figure8, echo=FALSE, fig.cap="Figure 4: PCA plot, rld and D. hansenii", fig.width=8, fig.height=4}
#for hansenii
plotPCA(rld_dh)
```

## DATA-VISUALIZATION 3 > SIMILARITY MATRIX

Calculation of the euclidean distance of the transformed data. We need to transpose the data since we want to calculate the distance between samples rather than among genes. So we need the samples as rows rather than columns

```{r}
library(DESeq2)
library(pheatmap)        
library(RColorBrewer)
#for cerevisiae
sampleDists_SC <- dist(t(assay(rld_sc)))
#Creating the corresponding matrix
sampleDistMatrix_SC <- as.matrix(sampleDists_SC)
#creating a distance matrix tagging the groups of the samples
sample_data_sc<-data.frame(Group=sampleinfo_sc$condition)
row.names(sample_data_sc)<-sampleinfo_sc$sampleName
#defining the colors we want to use depending on the condition
annotation_sc <- list(Group = c(Ctrl="green", Para="brown", Rapa="red", Salt="cyan", SaPa="blue", SaRa="magenta"))

#for hansenii
sampleDists_DH <- dist(t(assay(rld_dh)))
#Creating the corresponding matrix
sampleDistMatrix_DH <- as.matrix(sampleDists_DH)
#creating a distance matrix tagging the groups of the samples
sample_data_dh<-data.frame(Group=sampleinfo_dh$condition)
row.names(sample_data_dh)<-sampleinfo_dh$sampleName
#defining the colors we want to use depending on the condition
annotation_dh <- list(Group = c(Ctrl="green", Para="brown", Rapa="red", Salt1="cyan", Salt2="turquoise4", SaPa="blue", SaRa="magenta"))

#Make a color palette for heatmap
colfunc<-colorRampPalette(c("goldenrod4", "goldenrod", "white", "turquoise", "turquoise4"))
```

Plotting the heatmap for cerevisiae
```{r figure9, echo=FALSE, fig.cap="Figure 5: Similarity matrix, rld and S. cerevisiae", fig.width=8, fig.height=8}
pheatmap(sampleDistMatrix_SC, 
         annotation_col = sample_data_sc, 
         annotation_colors = annotation_sc, 
         color = colfunc(50))
```

Plotting the heatmap for hansenii
```{r figure10, echo=FALSE, fig.cap="Figure 6: Similarity matrix, rld and D. hansenii", fig.width=8, fig.height=8}
pheatmap(sampleDistMatrix_DH, 
         annotation_col = sample_data_dh, 
         annotation_colors = annotation_dh, 
         color = colfunc(50))
```

## DIFFERENTIALLY EXPRESSED GENES (DEGs) ANALYSIS

The standard differential expression analysis steps are wrapped into a single function, DESeq.The estimation steps performed by this function are described in the Methods section of the DESeq2 publication [Love, 2014](https://doi.org/10.1186/s13059-014-0550-8).

For differential testing it is recommended to use the DESeq function applied directly to the raw counts. 

```{r, message=FALSE}
#for cerevisiae
dds_T_SC <- DESeq(dds_SC)
#for hansenii
dds_T_DH <- DESeq(dds_DH)
```

### DEGs COMPARED TO CONTROL (FOR CEREVISIAE)

* **STEP1**:Data Preparation
```{r}
#differential expression Salt vs Ctrl
res_SC_Salt <-results(dds_T_SC, contrast=c("condition", "Salt", "Ctrl"))
#differential expression Para vs Ctrl 
res_SC_Para <-results(dds_T_SC, contrast=c("condition", "Para", "Ctrl"))
#differential expression SaPa vs Ctrl
res_SC_SaPa <-results(dds_T_SC, contrast=c("condition", "SaPa", "Ctrl"))
#differential expression Rapa vs Ctrl
res_SC_Rapa <-results(dds_T_SC, contrast=c("condition", "Rapa", "Ctrl"))
#differential expression SaRa vs Ctrl
res_SC_SaRa <-results(dds_T_SC, contrast=c("condition", "SaRa", "Ctrl"))
```

* **STEP2**:Making the dataframe
```{r}
salt_SC<-data.frame(res_SC_Salt, stringsAsFactors = FALSE)
para_SC<-data.frame(res_SC_Para, stringsAsFactors = FALSE)
rapa_SC<-data.frame(res_SC_Rapa, stringsAsFactors = FALSE)
SaPa_SC<-data.frame(res_SC_SaPa, stringsAsFactors = FALSE)
SaRa_SC<-data.frame(res_SC_SaRa, stringsAsFactors = FALSE)
```

* **STEP3**:Connecting with the Gene description

```{r}
#Import the Gene description file named **Gene_List_SC.tsv** in the **COMPILED_DATA** folder
Gene_Description_SC <- read.csv(file = "COMPILED_DATA/Gene_List_SC.tsv", 
                                  header = FALSE, 
                                  stringsAsFactors = FALSE,
                                  sep = "\t", quote = "", fill = FALSE)
colnames(Gene_Description_SC) <- c("SGD_DB_ID",
                                   "SYS_ID",
                                   "ORG",
                                   "GENE_SYM",
                                   "NAME",
                                   "DESCRIPTION")
row.names(Gene_Description_SC) <- Gene_Description_SC$SYS_ID

#Connect the result data.frame with the gene description
y <- as.character(rownames(salt_SC))
k <- vector(mode = "numeric", length = 0)
x <- Gene_Description_SC[(Gene_Description_SC$SYS_ID %in% y), ]
#column binding with the dataset
salt_SC_des <- cbind(salt_SC[x$SYS_ID, ], x)
para_SC_des <- cbind(para_SC[x$SYS_ID, ], x)
rapa_SC_des <- cbind(rapa_SC[x$SYS_ID, ], x)
SaPa_SC_des <- cbind(SaPa_SC[x$SYS_ID, ], x)
SaRa_SC_des <- cbind(SaRa_SC[x$SYS_ID, ], x)
```

### DEGs COMPARED TO CONTROL (FOR HANSENII)

* **STEP1**:Data Preparation
```{r}
#differential expression Salt1 vs Ctrl
res_DH_Salt1 <-results(dds_T_DH, contrast=c("condition", "Salt1", "Ctrl"))
#differential expression Salt2 vs Ctrl
res_DH_Salt2 <-results(dds_T_DH, contrast=c("condition", "Salt2", "Ctrl"))
#differential expression Para vs Ctrl 
res_DH_Para <-results(dds_T_DH, contrast=c("condition", "Para", "Ctrl"))
#differential expression SaPa vs Ctrl
res_DH_SaPa <-results(dds_T_DH, contrast=c("condition", "SaPa", "Ctrl"))
#differential expression Rapa vs Ctrl
res_DH_Rapa <-results(dds_T_DH, contrast=c("condition", "Rapa", "Ctrl"))
#differential expression SaRa vs Ctrl
res_DH_SaRa <-results(dds_T_DH, contrast=c("condition", "SaRa", "Ctrl"))
```

* **STEP2**:Making the dataframe
```{r}
salt1_DH<-data.frame(res_DH_Salt1, stringsAsFactors = FALSE)
salt2_DH<-data.frame(res_DH_Salt2, stringsAsFactors = FALSE)
para_DH<-data.frame(res_DH_Para, stringsAsFactors = FALSE)
rapa_DH<-data.frame(res_DH_Rapa, stringsAsFactors = FALSE)
SaPa_DH<-data.frame(res_DH_SaPa, stringsAsFactors = FALSE)
SaRa_DH<-data.frame(res_DH_SaRa, stringsAsFactors = FALSE)
```

### DEGs COMPARED TO CONTROL: DATA VISUALIZATION

#### HISTOGRAM

* Plotting the Effect size of DEGs
```{r figure11, echo=FALSE, fig.cap="Figure 7: Histogram, Single compound effect size", fig.width=8, fig.height=16}
par(mfrow=c(4,2))
hist(salt_SC$log2FoldChange,
     breaks = 50,
     xlab = "log2FoldChange", 
     ylab = "Frequency",
     main = "Control vs Salt(600mM)",
     col = "skyblue",
     xlim = c(-6, 6),
     ylim = c(0, 3000))
hist(salt1_DH$log2FoldChange,
     breaks = 50,
     xlab = "log2FoldChange", 
     ylab = "Frequency",
     main = "Control vs Salt(650mM)",
     col = "skyblue",
     xlim = c(-6, 6),
     ylim = c(0, 3000))
plot(0,type='n',axes=FALSE,ann=FALSE)
hist(salt2_DH$log2FoldChange,
     breaks = 50,
     xlab = "log2FoldChange", 
     ylab = "Frequency",
     main = "Control vs Salt(1200mM)",
     col = "skyblue",
     xlim = c(-6, 6),
     ylim = c(0, 3000))
hist(para_SC$log2FoldChange,
     breaks = 50,
     xlab = "log2FoldChange", 
     ylab = "Frequency",
     main = "Control vs Paraquat (1000 ug/ml)",
     col = "skyblue",
     xlim = c(-6, 6),
     ylim = c(0, 3000))
hist(para_DH$log2FoldChange,
     breaks = 50,
     xlab = "log2FoldChange", 
     ylab = "Frequency",
     main = "Control vs Paraquat (500 ug/ml)",
     col = "skyblue",
     xlim = c(-6, 6),
     ylim = c(0, 3000))
hist(rapa_SC$log2FoldChange,
     breaks = 50,
     xlab = "log2FoldChange", 
     ylab = "Frequency",
     main = "Control vs Rapamycin (1 ug/ml)",
     col = "skyblue",
     xlim = c(-6, 6),
     ylim = c(0, 3000))
hist(rapa_DH$log2FoldChange,
     breaks = 50,
     xlab = "log2FoldChange", 
     ylab = "Frequency",
     main = "Control vs Rapamycin (1 ug/ml)",
     col = "skyblue",
     xlim = c(-6, 6),
     ylim = c(0, 3000))
```

#### MA-PLOT 

A scatter plot of log2 fold changes (on the y-axis) versus the mean of normalized counts (on the x-axis)

* **STEP1**:Data Preparation

Shrinkage of effect size (LFC estimates) is useful for visualization and ranking of genes. To shrink the LFC, we pass the dds object to the function lfcShrink. Below we specify to use the apeglm method for effect size shrinkage [Zhu, Ibrahim, and Love 2018](https://doi.org/10.1093/bioinformatics/bty895), which improves on the previous estimator.

We provide the dds object and the name or number of the coefficient we want to shrink, where the number refers to the order of the coefficient as it appears after using the **resultsNames()** function

```{r, message=FALSE}
#
resultsNames(dds_T_SC)
resultsNames(dds_T_DH)
#Data_preparation_SC
resLFC_SC_Salt <- lfcShrink(dds_T_SC, coef = "condition_Salt_vs_Ctrl")
resLFC_SC_Para <- lfcShrink(dds_T_SC, coef = "condition_Para_vs_Ctrl")
resLFC_SC_SaPa <- lfcShrink(dds_T_SC, coef = "condition_SaPa_vs_Ctrl")
resLFC_SC_Rapa <- lfcShrink(dds_T_SC, coef = "condition_Rapa_vs_Ctrl")
resLFC_SC_SaRa <- lfcShrink(dds_T_SC, coef = "condition_SaRa_vs_Ctrl")
#Data_preparation_DH
resLFC_DH_Salt1 <- lfcShrink(dds_T_DH, coef = "condition_Salt1_vs_Ctrl")
resLFC_DH_Salt2 <- lfcShrink(dds_T_DH, coef = "condition_Salt2_vs_Ctrl")
resLFC_DH_Para <- lfcShrink(dds_T_DH, coef = "condition_Para_vs_Ctrl")
resLFC_DH_SaPa <- lfcShrink(dds_T_DH, coef = "condition_SaPa_vs_Ctrl")
resLFC_DH_Rapa <- lfcShrink(dds_T_DH, coef = "condition_Rapa_vs_Ctrl")
resLFC_DH_SaRa <- lfcShrink(dds_T_DH, coef = "condition_SaRa_vs_Ctrl")
``` 

* **STEP2**: PLOT the MA-plot

A. UNSHRUNKEN

```{r figure12, echo=FALSE, fig.cap="Figure 8: plotMA unshrunken, Single compound effect size", fig.width=8, fig.height=16}
library(apeglm)
par(mfrow=c(4,2))
plotMA(res_SC_Salt, ylim = c(-8, 8), main = "Control vs Salt(600mM)")
plotMA(res_DH_Salt1, ylim = c(-8, 8), main = "Control vs Salt(650mM)")
plot(0,type='n',axes=FALSE,ann=FALSE)
plotMA(res_DH_Salt2, ylim = c(-8, 8), main = "Control vs Salt(1200mM)")
plotMA(res_SC_Para, ylim = c(-8, 8), main = "Control vs Paraquat (1000 ug/ml)")
plotMA(res_DH_Para, ylim = c(-8, 8), main = "Control vs Paraquat (500 ug/ml)")
plotMA(res_SC_Rapa, ylim = c(-8, 8), main = "Control vs Rapamycin (1 ug/ml)")
plotMA(res_DH_Rapa, ylim = c(-8, 8), main = "Control vs Rapamycin (1 ug/ml)")
```

B. SHRUNKEN USING APEGLM

```{r figure13, echo=FALSE, fig.cap="Figure 9: plotMA shrunken, Single compound effect size", fig.width=8, fig.height=16}
library(apeglm)
par(mfrow=c(4,2))
plotMA(resLFC_SC_Salt, ylim = c(-8, 8), main = "Control vs Salt(600mM)")
plotMA(resLFC_DH_Salt1, ylim = c(-8, 8), main = "Control vs Salt(650mM)")
plot(0,type='n',axes=FALSE,ann=FALSE)
plotMA(resLFC_DH_Salt2, ylim = c(-8, 8), main = "Control vs Salt(1200mM)")
plotMA(resLFC_SC_Para, ylim = c(-8, 8), main = "Control vs Paraquat (1000 ug/ml)")
plotMA(resLFC_DH_Para, ylim = c(-8, 8), main = "Control vs Paraquat (500 ug/ml)")
plotMA(resLFC_SC_Rapa, ylim = c(-8, 8), main = "Control vs Rapamycin (1 ug/ml)")
plotMA(resLFC_DH_Rapa, ylim = c(-8, 8), main = "Control vs Rapamycin (1 ug/ml)")
```


#### VOLCANO PLOT

A. S. CEREVISIAE SINGLE COMPOUND

```{r figure14, echo=FALSE, fig.cap="Figure 10: Volcano plot- SALT vs CTRL, S. cerevisiae, Single compound effect size", fig.width=8, fig.height=8}
library(EnhancedVolcano)
EnhancedVolcano(res_SC_Salt,
                lab = rownames(res_SC_Salt),
                x = 'log2FoldChange',
                y = 'pvalue',
                title = 'Salt vs Ctrl',
                pCutoff = 0.001,
                FCcutoff = 1,
                pointSize = 1.0,
                labSize = 6.0)
```

```{r figure15, echo=FALSE, fig.cap="Figure 11: Volcano plot- PARA vs CTRL, S. cerevisiae, Single compound effect size", fig.width=8, fig.height=8}
library(EnhancedVolcano)
EnhancedVolcano(res_SC_Para,
                lab = rownames(res_SC_Para),
                x = 'log2FoldChange',
                y = 'pvalue',
                title = 'Paraquat vs Ctrl',
                pCutoff = 0.001,
                FCcutoff = 1,
                pointSize = 1.0,
                labSize = 6.0)
```

```{r figure16, echo=FALSE, fig.cap="Figure 12: Volcano plot- RAPA vs CTRL, S. cerevisiae, Single compound effect size", fig.width=8, fig.height=8}
library(EnhancedVolcano)
EnhancedVolcano(res_SC_Rapa,
                lab = rownames(res_SC_Rapa),
                x = 'log2FoldChange',
                y = 'pvalue',
                title = 'Rapamycin vs Ctrl',
                pCutoff = 0.001,
                FCcutoff = 1,
                pointSize = 1.0,
                labSize = 6.0)
```

